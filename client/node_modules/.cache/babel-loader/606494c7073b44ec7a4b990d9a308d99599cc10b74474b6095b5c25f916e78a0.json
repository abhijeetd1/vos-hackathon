{"ast":null,"code":"var _jsxFileName = \"/Users/abhijeet/MyProjects/th-hackathon-main/client/src/components/voiceRecorder/VoiceRecorder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport audio from '../../recorder.png';\nimport { ButtonWrapper, StyledButton, StyledIcon, VoiceRecorderWrapper } from './VoiceRecorder.style.tsx';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFoodItems, addPrompt, updatePrompt, clearPrompts, setNextAudioNew, setTotalCost } from '../../slices/orders.ts';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst blobToBase64 = blob => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => resolve(reader.result.split(',')[1]);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n};\nconst playFulfillmentText = async text => {\n  try {\n    const response = await axios.post('http://localhost:5000/synthesize', {\n      text\n    }, {\n      responseType: 'arraybuffer'\n    });\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const audioBuffer = await audioContext.decodeAudioData(response.data);\n    const source = audioContext.createBufferSource();\n    source.buffer = audioBuffer;\n    source.connect(audioContext.destination);\n    source.start(0);\n  } catch (error) {\n    console.error('Error playing fulfillment text:', error);\n  }\n};\nfunction removeQuotes(inputString) {\n  return inputString.replace(/\"/g, '');\n}\nconst VoiceRecorder = ({\n  setTranscript,\n  setRecording,\n  recording,\n  setWaitingForTranscript\n}) => {\n  _s();\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const [mediaRecorder, setMediaRecorder] = useState();\n  const [sessionId, setSessionId] = useState(uuidv4()); // Generate a new session ID\n  const dispatch = useDispatch();\n  const handleAudioCapture = async () => {\n    if (!recording) {\n      setRecording(true);\n      audioChunksRef.current = [];\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        mediaRecorderRef.current = new MediaRecorder(stream, {\n          mimeType: 'audio/webm'\n        });\n        setMediaRecorder(mediaRecorderRef.current);\n        mediaRecorderRef.current.ondataavailable = event => {\n          audioChunksRef.current.push(event.data);\n        };\n        mediaRecorderRef.current.onstop = async () => {\n          const audioBlob = new Blob(audioChunksRef.current, {\n            type: 'audio/webm'\n          });\n          const audioBase64 = await blobToBase64(audioBlob);\n          await sendAudioToBackend(audioBase64);\n        };\n        mediaRecorderRef.current.start();\n      } catch (error) {\n        console.error('Error accessing microphone:', error);\n      }\n    } else {\n      var _mediaRecorderRef$cur;\n      setRecording(false);\n      (_mediaRecorderRef$cur = mediaRecorderRef.current) === null || _mediaRecorderRef$cur === void 0 ? void 0 : _mediaRecorderRef$cur.stop();\n    }\n  };\n  const nextAudioNew = useSelector(state => state.orders.nextAudioNew);\n  const sendAudioToBackend = async audioBase64 => {\n    try {\n      if (nextAudioNew) {\n        // clear conversation, food items, and cost as it is a new session. \n        dispatch(clearPrompts());\n        dispatch(setFoodItems([]));\n        dispatch(setTotalCost(null));\n      }\n      setWaitingForTranscript(true);\n\n      // Send request to transcribe the users audio \n      const response = await axios.post('http://localhost:5000/transcribe', {\n        audio: audioBase64\n      });\n      if (response.data && response.data.transcription) {\n        setTranscript(response.data.transcription);\n        dispatch(addPrompt({\n          prompt: response.data.transcription,\n          fulfillmentText: null\n        }));\n        // once we recieve the transcription, send request to dialog flow\n        let fulfillment = await axios.post('http://localhost:5000/detect-intent', {\n          query: response.data.transcription,\n          sessionId: sessionId,\n          isNewOrder: nextAudioNew\n        });\n        // once we recieve the response, update state to store all the new products, cost, etc. \n        if (fulfillment.data.fulfillmentText) {\n          dispatch(setNextAudioNew(false));\n          if (fulfillment.data.fulfillmentText.includes('payment')) {\n            dispatch(setNextAudioNew(true));\n          }\n          await playFulfillmentText(fulfillment.data.fulfillmentText);\n          dispatch(updatePrompt({\n            prompt: response.data.transcription,\n            fulfillmentText: removeQuotes(fulfillment.data.fulfillmentText)\n          }));\n          dispatch(setFoodItems(fulfillment.data.foodItems));\n          dispatch(setTotalCost(fulfillment.data.total));\n        }\n        setWaitingForTranscript(false);\n      }\n      setWaitingForTranscript(false);\n    } catch (error) {\n      console.error('Error sending audio to backend:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(VoiceRecorderWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Welcome! Press the button below to begin placing your order \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonWrapper, {\n      children: /*#__PURE__*/_jsxDEV(StyledButton, {\n        onClick: handleAudioCapture,\n        children: /*#__PURE__*/_jsxDEV(StyledIcon, {\n          isRecording: recording,\n          src: audio,\n          alt: \"recording-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceRecorder, \"cCuYI1klmmoQtasjl+n2s3hTlkI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useRef","axios","audio","ButtonWrapper","StyledButton","StyledIcon","VoiceRecorderWrapper","useSelector","useDispatch","setFoodItems","addPrompt","updatePrompt","clearPrompts","setNextAudioNew","setTotalCost","v4","uuidv4","jsxDEV","_jsxDEV","blobToBase64","blob","Promise","resolve","reject","reader","FileReader","onloadend","result","split","onerror","readAsDataURL","playFulfillmentText","text","response","post","responseType","audioContext","window","AudioContext","webkitAudioContext","audioBuffer","decodeAudioData","data","source","createBufferSource","buffer","connect","destination","start","error","console","removeQuotes","inputString","replace","VoiceRecorder","setTranscript","setRecording","recording","setWaitingForTranscript","_s","mediaRecorderRef","audioChunksRef","mediaRecorder","setMediaRecorder","sessionId","setSessionId","dispatch","handleAudioCapture","current","stream","navigator","mediaDevices","getUserMedia","MediaRecorder","mimeType","ondataavailable","event","push","onstop","audioBlob","Blob","type","audioBase64","sendAudioToBackend","_mediaRecorderRef$cur","stop","nextAudioNew","state","orders","transcription","prompt","fulfillmentText","fulfillment","query","isNewOrder","includes","foodItems","total","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isRecording","src","alt","_c","$RefreshReg$"],"sources":["/Users/abhijeet/MyProjects/th-hackathon-main/client/src/components/voiceRecorder/VoiceRecorder.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport audio from '../../recorder.png'; \nimport { ButtonWrapper, StyledButton, StyledIcon, VoiceRecorderWrapper } from './VoiceRecorder.style.tsx';\nimport { LiveAudioVisualizer } from 'react-audio-visualize';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setCustomizationItems, setFoodItems, setDrinkItems, addPrompt, updatePrompt, clearPrompts, setNextAudioNew, setTotalCost } from '../../slices/orders.ts';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Microphone as ReactComponent} from '../../microphone-svgrepo-com.svg'\n\nconst blobToBase64 = (blob: Blob): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => resolve((reader.result as string).split(',')[1]);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n};\n\ntype VoiceRecorderProps =  {\n    setTranscript: (content: string) => void; \n    setRecording: (content: boolean) => void; \n    recording: boolean; \n    setWaitingForTranscript: (content: boolean) => void;\n}\n\nconst playFulfillmentText = async (text: string) => {\n  try {\n    const response = await axios.post('http://localhost:5000/synthesize', { text }, { responseType: 'arraybuffer' });\n    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    const audioBuffer = await audioContext.decodeAudioData(response.data);\n    const source = audioContext.createBufferSource();\n    source.buffer = audioBuffer;\n    source.connect(audioContext.destination);\n    source.start(0);\n  } catch (error) {\n    console.error('Error playing fulfillment text:', error);\n  }\n};\n\nfunction removeQuotes(inputString: string): string {\n  return inputString.replace(/\"/g, '');\n}\n\nconst VoiceRecorder = ({setTranscript, setRecording, recording, setWaitingForTranscript}: VoiceRecorderProps) => {\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder>();\n  const [sessionId, setSessionId] = useState(uuidv4()); // Generate a new session ID\n  const dispatch = useDispatch()\n\n  const handleAudioCapture = async () => {\n    if (!recording) {\n      setRecording(true);\n      audioChunksRef.current = [];\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        mediaRecorderRef.current = new MediaRecorder(stream, { mimeType: 'audio/webm' });\n        setMediaRecorder(mediaRecorderRef.current);\n        mediaRecorderRef.current.ondataavailable = (event) => {\n        \n          audioChunksRef.current.push(event.data);\n        };\n        mediaRecorderRef.current.onstop = async () => {\n          const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\n          const audioBase64 = await blobToBase64(audioBlob);\n          await sendAudioToBackend(audioBase64);\n        };\n\n        mediaRecorderRef.current.start();\n      } catch (error) {\n        console.error('Error accessing microphone:', error);\n      }\n    } else {\n      setRecording(false);\n      mediaRecorderRef.current?.stop();\n    }\n  };\n\n  const nextAudioNew = useSelector((state : any) => state.orders.nextAudioNew)\n\n\n  const sendAudioToBackend = async (audioBase64: string) => {\n\n    try {\n      if (nextAudioNew) {\n        // clear conversation, food items, and cost as it is a new session. \n        dispatch(clearPrompts());\n        dispatch(setFoodItems([]));\n        dispatch(setTotalCost(null));\n      }\n      setWaitingForTranscript(true)\n\n      // Send request to transcribe the users audio \n      const response = await axios.post('http://localhost:5000/transcribe', { audio: audioBase64 });\n      if (response.data && response.data.transcription) {\n        setTranscript(response.data.transcription);\n        dispatch(addPrompt({prompt: response.data.transcription, fulfillmentText: null } ));\n        // once we recieve the transcription, send request to dialog flow\n        let fulfillment = await axios.post('http://localhost:5000/detect-intent', {\n           query: response.data.transcription, sessionId: sessionId, \n           isNewOrder: nextAudioNew\n           }); \n        // once we recieve the response, update state to store all the new products, cost, etc. \n        if (fulfillment.data.fulfillmentText) {\n          dispatch(setNextAudioNew(false));\n            if (fulfillment.data.fulfillmentText.includes('payment')) {\n              dispatch(setNextAudioNew(true));\n            }           \n            await playFulfillmentText(fulfillment.data.fulfillmentText);\n            dispatch(updatePrompt({prompt: response.data.transcription, fulfillmentText: removeQuotes(fulfillment.data.fulfillmentText) } ));\n            dispatch(setFoodItems(fulfillment.data.foodItems));\n            dispatch(setTotalCost(fulfillment.data.total))\n        }\n        setWaitingForTranscript(false)\n      }\n\n      setWaitingForTranscript(false)\n    } catch (error) {\n      console.error('Error sending audio to backend:', error);\n    }\n  };\n\n  return (\n    <VoiceRecorderWrapper>\n      <p>Welcome! Press the button below to begin placing your order </p>\n      <ButtonWrapper>\n          <StyledButton onClick={handleAudioCapture}>\n            <StyledIcon isRecording={recording}src={audio} alt='recording-icon'/>\n          </StyledButton>\n      </ButtonWrapper>\n    </VoiceRecorderWrapper>\n  );\n};\n\nexport default VoiceRecorder;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}